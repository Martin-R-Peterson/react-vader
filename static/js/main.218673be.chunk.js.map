{"version":3,"sources":["History.js","App.js","reportWebVitals.js","index.js"],"names":["History","rows","className","map","row","index","name","Math","round","temp","api","App","useState","query","setQuery","weather","setWeather","history","setHistory","console","log","main","check","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","translate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.218673be.chunk.js","sourcesContent":["import './History.scss';\r\n\r\nexport  function History({rows}){\r\n\r\n\r\n    return (\r\n   <>\r\n    <div className=\"ok\">Senast sökta platser</div>\r\n    <table>\r\n        <tbody>\r\n        <tr>\r\n            <th>Plats</th>\r\n            <th>Temp</th>\r\n        </tr>\r\n        {rows.map((row,index) => {\r\n            return (\r\n            <tr key={index}>\r\n            <td>{row.name}</td>\r\n            <td>{Math.round(row.temp)}°C</td>\r\n        </tr>)\r\n        })}\r\n        \r\n        </tbody>\r\n        </table>\r\n    </>\r\n)\r\n\r\n}\r\n\r\n","/* eslint-disable default-case */\nimport { useState } from 'react';\nimport './App.scss';\nimport {History} from './History.js';\n\n\nconst api ={\n  key:\"e517df706c98bb3c34237b4e118e1555\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n\nconst [query, setQuery] = useState('');\nconst [weather, setWeather] = useState({});\nconst [history, setHistory] = useState([]);\n\nconsole.log(\"test\");\n\nconst search = evt => {\nif (evt.key === \"Enter\") {\n  fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n  .then(res => res.json())\n\n  .then(result => {\n    const {name, main} = result;\n    const {temp} = {...main};\n    setHistory([...history,{name:name, temp:temp}])\n    setWeather(result);\n    setQuery('');\n\n  })\n}\n}\n\n\nconst dateBuilder = (d) => {\n  let months = [\"Januari\", \"Februari\", \"Mars\",\"April\",\"Maj\", \"Juni\", \"Juli\", \"Augusti\", \"September\", \"Oktober\", \"November\", \"December\"];\n  let days = [\"Söndag\", \"Måndag\", \"Tisdag\", \"Onsdag\", \"Torsdag\", \"Fredag\", \"Lördag\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day} ${date} ${month} ${year}`;\n}\n\nfunction check(){\n  if (typeof weather.main != \"undefined\"){\n    let vdrtyp = weather.weather[0].main;\n    let temp = \" \";\n    switch(vdrtyp){\n      case \"Clear\":\n       temp = \"App\";\n        break;\n       case \"rain\":\n       temp = \"Apprain\";\n       break;\n       case \"drizzle\":\n       temp =\"Apprain\";\n       break;\n       case \"Clouds\":\n       temp =\"Appclouds\";\n       break;\n  }\n\n  return temp;\n\n}\n}\n\nfunction translate(){\n  if(typeof weather.main != \"undefined\"){\n    let vdr = weather.weather[0].main;\n    let temp = \" \";\n\n    switch(vdr){\n      case \"Clear\":\n       temp = \"Klart\";\n        break;\n       case \"rain\":\n       temp = \"Regn\";\n       break;\n       case \"drizzle\":\n       temp =\"Regn\";\n       break;\n       case \"Clouds\":\n       temp =\"Molnigt\";\n       break;\n  }\n\n  return temp;\n \n  }\n}\n\n\n\n  return (\n    <div className={check()}>\n      <main>\n      <div className=\"s-box\">\n        <input \n        type=\"text\" \n        className=\"s-bar\" \n        placeholder=\"Sök Stad...\"\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n        onKeyPress={search}/>\n      </div>\n      {(typeof weather.main != \"undefined\") ? (\n      <div>\n      <div className=\"l-box\">\n        <div className=\"location\"> {weather.name}, {weather.sys.country}</div>\n        <div className=\"date\">\n          {dateBuilder(new Date())}\n        </div>\n      </div>\n      <div className=\"w-box\">\n        <div className=\"temp\">\n          {Math.round(weather.main.temp)}°C\n        </div>\n        <div className=\"weather\">\n          {translate()}\n        </div>\n      </div>\n      <History rows={history}></History>\n      </div>\n  ) : ('')}\n      </main>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}